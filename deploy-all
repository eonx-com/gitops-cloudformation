#!/usr/bin/env bash

clear;
parameters=("$@")

if [[ ${#} < 1 ]]; then
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "Manual (But Still Lazy) CloudFormation Template Build & Deploy"
  echo "---------------------------------------------------------------------------------------------------------------"
  echo
  echo "IMPORTANT NOTE: Because I am lazy it is expected that this script is run from a folder containing one or more"
  echo "                project folder. If you're feeling energetic you can refudge my bash and make this more flexible"
  echo
  echo "Usage:"
  echo
  echo "  build-all [PROJECT] [ENVIRONMENT...1] [ENVIRONMENT...n]";
  echo
  echo "Parameters:"
  echo
  echo "  PROJECT           Name of the project folder to be build (use asterisk in quotes \"*\" to build all projects)"
  echo "  ENVIRONMENT...x   Name of the environment (or environments) to be build. Omit this parameter to build all environments"
  echo
  echo "Examples:"
  echo
  echo "  build-all Manage Dev Uat      Build 'Manage' project in the 'Dev' and 'Uat' environments only"
  echo "  build-all Manage              Build 'Manage' project in all environments"
  echo "  build-all \"*\"               Build all projects and all environments"
  echo
fi

echo "---------------------------------------------------------------------------------------------------------------"
echo "Manual (But Still Lazy) CloudFormation Template Build & Deploy (Patent Pending)"
echo "---------------------------------------------------------------------------------------------------------------"

# Convert parameter to lowercase
to_lower() {
  python -c "print('${1}'.lower())";
}

# Convert parameter to UPPERCASE
to_upper() {
  python -c "print('${1}'.upper())";
}

# Convert parameter to TitleCase
to_title() {
  python -c "print('${1}'.lower().title())";
}

timestamp=$(date +%s%3N)

if [[ ! -z "${REGION_TO_DEPLOY}" ]]; then
  regions=("${REGION_TO_DEPLOY}")
else
  regions=(UsEast1 ApSoutheast2)
fi

if [[ "${parameters[0]}" == "*" ]]; then
  projects=()
  for directory in ./*; do
    projects+=("$(basename ${directory})")
  done
else
  projects=(${parameters[0]} )
fi

if [[ ${#} > 1 ]]; then
  environments=()
  for i in $(seq 2 $((${#})) ); do
    environments+=("${parameters[$i-1]}")
  done
fi

artifact_id_snake=$(echo ${artifact_id} | sed 's/\([a-z0-9]\)\([A-Z0-9]\)/\1-\L\2/g');

for project in "${projects[@]}"; do
  if [[ "${parameters[0]}" == "${project}" || "${parameters[0]}" == "*" ]]; then
    if [[ ! -d ./${project} ]]; then
      echo "ERROR: Could not locate project folder, please ensure you are running this in the correct folder"
      exit 1;
    fi

    for region_current in "${regions[@]}"; do
      region_current_hyphen=$(echo ${region_current} | sed 's/\([a-z0-9]\)\([A-Z0-9]\)/\1-\L\2/g');
      region_current_hyphen=$(to_lower ${region_current_hyphen})

      for region_folder in ./${project}/*; do
        if [[ -d ${region_folder} ]]; then
          region_folder=$(basename ${region_folder})
          region_hyphen=$(echo ${region_folder} | sed 's/\([a-z0-9]\)\([A-Z0-9]\)/\1-\L\2/g');
          region_hyphen=$(to_lower ${region_hyphen})

          project_basename=$(basename ${project})
          project_basename_lower=$(to_lower ${project_basename})
          project_hyphen_lower=$(echo ${project_basename} | sed 's/\([a-z0-9]\)\([A-Z0-9]\)/\1-\L\2/g');
          project_hyphen_lower=$(to_lower ${project_hyphen_lower})

          if [[ "${region_current_hyphen}" == "${region_hyphen}" ]]; then
            for environment in ./${project}/${region_folder}/*; do
              if [[ -d ${environment} ]]; then
                environment=$(basename ${environment})
                if [[ ${#} < 2 || "${environments[@]}" =~ "${environment}" ]]; then
                  environment_lower=$(to_lower ${environment})
                  aws_account_id=$(cat ./${project}/${region_folder}/Build.json | jq -r ".Infrastructure.Environments[\"${environment}\"].AwsAccountId")
                  path_output=$(cat ./${project}/${region_folder}/Build.json | jq -r ".PathOutput")
                  s3_bucket="artifacts.infrastructure.${environment_lower}.${project_hyphen_lower}.eonx.com"
                  s3_prefix="$(basename ${project})/${timestamp}"

                  if [[ -d ${path_output}/${environment} ]]; then
                    rm -rf ${path_output}/${environment};
                    mkdir -p ${path_output}/${environment};
                  fi

                  echo
                  echo "Project:                ${project_hyphen_lower}"
                  echo "Environment:            ${environment_lower}"
                  echo "AWS Account:            ${aws_account_id}"
                  echo "AWS Region:             ${region_hyphen}"
                  echo "Template Bucket:        ${s3_bucket}/${s3_prefix}"
                  echo "Output Path:            ${path_output}"
                  echo

                  builder \
                    --config      ${project}/${region_folder}/Build.json \
                    --path-output ${path_output} \
                    --environment ${environment}

                  error_code="${?}"
                  if [[ "${error_code}" != "0" ]]; then
                    echo "FATAL ERROR: Failed to build template";
                    exit ${error_code};
                  fi
                  echo

                  #  template_validation="1"
                  #
                  #  for stack_basename in $(find ${path_output}/${environment}/Templates -name '*.yml' | sort --version-sort); do
                  #    stack_name=$(basename $stack_basename)
                  #    stack_name=${stack_name:4}
                  #
                  #    echo
                  #    echo "Validating: ${stack_basename}"
                  #    echo
                  #
                  #    aws cloudformation validate-template --template-body file://${stack_basename}
                  #
                  #    error_code="${?}"
                  #    if [[ "${error_code}" != "0" ]]; then
                  #      template_validation="0"
                  #    fi
                  #
                  #  done
                  #
                  #  if [[ "${template_validation}" != "1" ]]; then
                  #    echo "FATAL ERROR: AWS CloudFormation validation failed";
                  #    exit 666;
                  #  fi
                  #
                  #  echo
                  #  echo "---------------------------------------------------------------------------------------------------------------"
                  #  echo "Validation completed"
                  #  echo "---------------------------------------------------------------------------------------------------------------"

                  # This is a load of crap- the AWS CLI craps out when a tag contains a space and is executed from a
                  # shell script-- don't even ask, idea was stolen from here:
                  # shell script-- don't even ask, idea was stolen from here:
                  # (https://stackoverflow.com/questions/59400050/how-do-you-add-spaces-for-aws-cli-cloudformation-deploy)
                  # Deploy to AWS

                  for stack_basename in $(find ${path_output}/${environment}/Templates -name '*.yml' | sort --version-sort); do
                    stack_name=$(basename $stack_basename)
                    stack_name=${stack_name:4}
                    stack_name=${stack_name%.*}
                    stack_md5=`md5sum ${stack_basename} | awk '{ print $1 }'`

                    if [[ ! -d "./.deploy-history" ]]; then
                      mkdir ./.deploy-history
                    fi

                    filename_md5=`echo ${stack_basename} | md5sum | awk '{ print $1 }'`
                    filename_hash="./.deploy-history/${filename_md5}"

                    skip="0"
                    if [[ -f "${filename_hash}" ]]; then
                      stack_last_md5=$(cat "${filename_hash}")
                      if [[ "${stack_last_md5}" == ${stack_md5} ]]; then
                          echo "Skipping Unchanged Template: ${stack_basename} (${filename_md5}:${stack_md5})"
                          skip="1"
                      fi
                    fi

                    if [[ "${skip}" == "0" ]]; then
                      echo
                      echo "Assuming IAM Role"
                      iam_role="arn:aws:iam::${aws_account_id}:role/Administrator"
                      aws-google-auth -r ${iam_role}

                      error_code="${?}"
                      if [[ "${error_code}" != "0" ]]; then
                        echo "FATAL ERROR: AWS account authentication failed with error code ${error_code}";
                        exit ${error_code};
                      fi
                      echo

                      echo "Deploying: ${stack_basename} (${stack_md5})"

                      # Make sure the manual deployment bucket exists

                      if aws s3 ls "s3://${s3_bucket}" --profile=sts 2>&1 | grep -q 'NoSuchBucket'; then
                        echo "Creating template bucket: s3://${s3_bucket}"
                        aws s3 mb "s3://${s3_bucket}" --profile=sts
                      fi

                      if aws s3 ls "s3://${s3_bucket}" --profile=sts 2>&1 | grep -q 'NoSuchBucket'; then
                        echo "ERROR: Could not create S3 bucket '${s3_bucket}'"
                        exit 1;
                      fi

                      tag_filename=$(echo ${stack_basename} | sed 's/\/Templates\//\/Tags\//g' | sed 's/\.yml/\.json/g')

                      # This is a load of crap- the AWS CLI craps out when a tag contains a space and is executed from a
                      # shell script-- don't even ask, idea was stolen from here:
                      # (https://stackoverflow.com/questions/59400050/how-do-you-add-spaces-for-aws-cli-cloudformation-deploy)

                      cat ${tag_filename} | jq '.[] | (.Key + "=" + .Value)' > tags.json
                      echo "\"DeployedByHostname=$(hostname)\"" >> tags.json
                      echo "\"DeployedByUsername=${USER}\"" >> tags.json
                      echo "\"DeployedByKernelName=$(uname | sed 's/#//g')\"" >> tags.json
                      echo "\"DeployedByKernelHardware=$(uname -m | sed 's/#//g')\"" >> tags.json
                      echo "\"DeployedByKernelRelease=$(uname -r | sed 's/#//g')\"" >> tags.json
                      echo "\"DeployedByKernelVersion=$(uname -v | sed 's/#//g')\"" >> tags.json

                      deploy=(aws cloudformation deploy \
                        --no-fail-on-empty-changeset \
                        --profile sts \
                        --stack-name "${stack_name}" \
                        --template-file "${stack_basename}" \
                        --s3-bucket "${s3_bucket}" \
                        --s3-prefix "${s3_prefix}" \
                        --capabilities "CAPABILITY_NAMED_IAM" \
                        --region "${region_hyphen}" \
                        --no-fail-on-empty-changeset \
                        --tags $(cat tags.json)
                      )

                      error_code="${?}"
                      if [[ "${error_code}" != "0" ]]; then
                        echo "FATAL ERROR: AWS Deployment failed with error code ${error_code}";
                        echo
                        aws cloudformation describe-stack-events \
                          --stack-name "${stack_name}" \
                          --profile sts | jq '.StackEvents[] | {LogicalResourceId: .LogicalResourceId, Reason:.ResourceStatusReason} | select(.Reason != null)';
                        echo
                        exit ${error_code};
                      fi
                      echo

                      eval $(echo ${deploy[@]})

                      error_code="${?}"
                      if [[ "${error_code}" != "0" ]]; then
                        echo "FATAL ERROR: AWS Deployment failed with error code ${error_code}";
                        echo
                        aws cloudformation describe-stack-events \
                          --stack-name "${stack_name}" \
                          --profile sts | jq '.StackEvents[] | {Timestamp: .Timestamp, EventId: .EventId, LogicalResourceId: .LogicalResourceId, Reason:.ResourceStatusReason} | select(.Reason != null)';
                        echo
                        exit ${error_code};
                      fi
                      echo

                      if [[ -f tags.json ]]; then
                        rm tags.json
                      fi

                      error_code="${?}"
                      if [[ "${error_code}" != "0" ]]; then
                        echo "FATAL ERROR: AWS Deployment failed with error code ${error_code}";
                        exit ${error_code};
                      fi
                      echo

                      echo "${stack_md5}" > ${filename_hash}
                    fi

                  done

                  echo
                  echo "---------------------------------------------------------------------------------------------------------------"
                fi
              fi
            done
          fi
        fi
      done
    done

  fi
done

echo

















